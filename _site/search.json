[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Determinação e Calibração da Concentração de Inóculo Fúngico",
    "section": "",
    "text": "Determinação e Calibração da Concentração de Inóculo Fúngico\n\nVia suspensão de esporos utilizando hemacitômetro\nO hemacitômetro comum consiste em uma lâmina retangular em forma de H, na qual se encontram duas regiões delimitadas, (figura I). Cada região delimitada possui uma superfície de 9 mm² e profundidade de 0,1 mm. Esse compartimento possui 9 divisões/quadrantes, (figura II) que são de três tipos, são eles “A” = “B” = “C”, em que:\n\n“A” – localizados nos quatro cantos e subdivididos em 15 quadrados “a”\n“B” – localizados entre os compartimentos “A” e subdivididos em 20 quadrados “b”\n“C” – localizado no centro e subdivididos em 25 quadrados “c”\n\n\n\n\nI: Esquema de um hemacitômetro tipo Neubauer: lâmina retangular em forma de “H”, II compartimentos (A, B, C) e subcompartimentos (a-c) da lâmina (fonte: Alfenas & Mafia, 2016)\n\n\nPara utilizar o aplicativo, preencha os campos conforme o indicado e escolha o quadrante no qual foi realizada a contagem de esporos. Insira o volume final de suspensão de esporos e a concentração desejada. A aplicação lhe retornara três valores:\n\nEsporos por mL da suspensão inicial\nVolume da suspensão inicial para preparo da suspensão de inóculo final em mL”\nVolume de veículo para preparo da suspensão de inóculo final em mL”\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 650\n# Carrega os pacotes necessários. O webr::install garante que o dplyr seja instalado no ambiente.\nwebr::install(\"dplyr\")\nlibrary(shiny)\nlibrary(dplyr)\n\n# --- Função de Cálculo (sem alterações na lógica principal) ---\n# A função permanece a mesma, pois a lógica de cálculo está correta.\ninoculo &lt;- function(numero, quadrante, conc, volume) {\n  if (!is.numeric(numero) || !is.numeric(conc) || !is.numeric(volume)) {\n    stop(\"Os argumentos devem ser numéricos.\")\n  }\n  \n  fator_correcao &lt;- case_when(\n    quadrante == \"A\" ~ 10000,\n    quadrante == \"a\" ~ 160000,\n    quadrante == \"b\" ~ 200000,\n    quadrante == \"c\" ~ 250000,\n    quadrante == \"c'\" ~ 4000000,\n    TRUE ~ 1\n  )\n  \n  esporo_mL &lt;- numero * fator_correcao\n  \n  # Adicionado um controle para evitar divisão por zero\n  if (esporo_mL == 0) {\n    return(list(esporo_mL = 0, volume_inoculo = 0, volume_veiculo = 0))\n  }\n  \n  volume_inoculo &lt;- (conc * volume) / esporo_mL\n  volume_veiculo &lt;- volume - volume_inoculo\n  \n  return(list(esporo_mL = esporo_mL, volume_inoculo = volume_inoculo, volume_veiculo = volume_veiculo))\n}\n\n# --- Interface de Usuário (UI) Melhorada ---\nui &lt;- fluidPage(\n  theme = bslib::bs_theme(bootswatch = \"lumen\"),\n  titlePanel(\"Calculadora para Calibração de Inóculo Fúngico\"),\n  \n  # Layout com painel lateral para entradas\n  sidebarLayout(\n    sidebarPanel(\n      h4(\"Parâmetros de Entrada\"),\n      \n      # Usamos req() no server para garantir que o valor seja maior que 0\n      numericInput(\"numero\", \"Número MÉDIO de esporos contados:\",  min = 0),\n      \n      radioButtons(\"quadrante\", \"Quadrante utilizado na contagem:\",\n                   choices = c(\"A\", \"a\", \"b\", \"c\", \"c'\"), \n                   selected = \"A\"),\n      \n      numericInput(\"volume\", \"Volume final desejado (mL):\",  min = 0),\n      \n      # As opções de concentração foram mantidas\n      radioButtons(\"conc\", \"Concentração final desejada (esporos/mL):\",\n                   choices = c(\"10²\" = 100, \n                               \"10³\" = 1000,\n                               \"10⁴\" = 10000,\n                               \"5X10⁴\" = 50000,\n                               \"10⁵\" = 100000, \n                               \"10⁶\" = 1000000, \n                               \"10⁷\" = 10000000,\n                               \"10⁸\" = 100000000,\n                               \"10⁹ \"= 1000000000,\n                               \"10¹⁰\"= 10000000000),\n                   selected = 10000)\n    ),\n    \n    # Painel principal para exibir os resultados\n    mainPanel(\n      h4(\"Resultados\"),\n      # uiOutput permite criar a interface dinamicamente no server\n      uiOutput(\"resultados_ui\")\n      )\n    )\n  )\n)\n\n# --- Lógica do Servidor (Server) Aprimorada ---\nserver &lt;- function(input, output, session) {\n  \n  # Cria um objeto reativo que recalcula sempre que uma entrada mudar\n  resultados_calculados &lt;- reactive({\n    # req() garante que os inputs não sejam nulos ou zero antes de prosseguir\n    req(input$numero &gt; 0, input$volume &gt; 0)\n    \n    # Chama a função com os valores dos inputs\n    inoculo(\n      numero = input$numero,\n      quadrante = input$quadrante,\n      conc = as.numeric(input$conc),\n      volume = input$volume\n    )\n  })\n  \n  # Renderiza a UI dos resultados dinamicamente\n  output$resultados_ui &lt;- renderUI({\n    \n    res &lt;- resultados_calculados()\n    \n    # Condição de erro: se o volume de inóculo for maior que o volume final\n    if (res$volume_inoculo &gt; input$volume) {\n      tagList(\n        tags$div(\n          class = \"alert alert-danger\", # Estilo de alerta de perigo\n          h5(\"Atenção: Diluição Impossível!\"),\n          p(\"A concentração da sua suspensão inicial (\", \n            strong(format(res$esporo_mL, scientific = FALSE, big.mark = \".\")), \n            \" esporos/mL) é muito baixa para atingir a concentração final desejada de \",\n            strong(format(as.numeric(input$conc), scientific = FALSE, big.mark = \".\")),\n            \" esporos/mL. Você precisa de uma suspensão inicial mais concentrada.\"\n          )\n        )\n      )\n    } else {\n      # Exibe os resultados formatados se tudo estiver correto\n      tagList(\n        tags$div(\n          class = \"alert alert-success\", # Estilo de alerta de sucesso\n          p(strong(\"Concentração da Suspensão Inicial (Ci): \"), \n            # Formata o número para melhor leitura\n            format(res$esporo_mL, scientific = FALSE, big.mark = \".\"), \" esporos/mL\"),\n          hr(),\n          p(strong(\"Volume da Suspensão Inicial (Vi): \"), \n            # Arredonda para 2 casas decimais\n            round(res$volume_inoculo, 2), \" mL\"),\n          p(strong(\"Volume de Veículo (água/meio): \"), \n            round(res$volume_veiculo, 2), \" mL\")\n        )\n      )\n    }\n  })\n}\n\n# Roda a aplicação\nshinyApp(ui = ui, server = server)\n\n\nReferência: Alfenas A., Mafia R. Métodos em Fitopatologia. 2ª edição. Editora UFV. 2016.\n\n\n\n\n“Copyright 2024, Endrio Webers”"
  },
  {
    "objectID": "dose_calc.html",
    "href": "dose_calc.html",
    "title": "",
    "section": "",
    "text": "(media/app/tabela_conversao.png){fig-align=“right” width=500px}\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 500\nwebr::install(\"dplyr\")\n\nlibrary(shiny)\nlibrary(dplyr)\n\n# Definindo as unidades disponíveis\nunidades &lt;- c(\"mg/L\", \"g/L\", \"µg/mL\", \"g/mL\", \"ppm\", \"mg/mL\")\n\n# Definindo a interface do usuário (UI)\nui &lt;- fluidPage(\n  titlePanel(\"Conversor de Doses\"),\n  tags$head(\n    tags$style(HTML(\".shiny-input-container { margin-bottom: 20px; }\n      #resultado { padding: 10px; border: 2px solid #4CAF50;\n      background-color: #DFF2BF; color: #4CAF50; font-weight: bold;\n      border-radius: 5px; } body { font-family: Arial, sans-serif; }\n      .title { color: #4CAF50; } .panel { background-color: #F9F9F9;\n      border-radius: 5px; padding: 20px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); }\"))\n  ),\n  sidebarLayout(\n    sidebarPanel(\n      class = \"panel\",\n      numericInput(\"valor\", \"Valor:\", value = 0, min = 0),\n      selectInput(\"unidade_entrada\", \"De:\", choices = unidades),\n      selectInput(\"unidade_saida\", \"Para:\", choices = unidades),\n      textOutput(\"resultado\")\n    ),\n    mainPanel()\n  )\n)\n\nserver &lt;- function(input, output) {\n  converter_dose &lt;- function(valor, unidade_entrada, unidade_saida) {\n    if (unidade_entrada == unidade_saida) {\n      resultado &lt;- valor\n    } else {\n      if (unidade_entrada == \"mg/L\" && unidade_saida == \"g/L\") {\n        resultado &lt;- valor / 1000\n      } else if (unidade_entrada == \"mg/L\" && unidade_saida == \"µg/mL\") {\n        resultado &lt;- valor * 1\n      } else if (unidade_entrada == \"mg/L\" && unidade_saida == \"g/mL\") {\n        resultado &lt;- valor / 1000000\n      } else if (unidade_entrada == \"mg/L\" && unidade_saida == \"ppm\") {\n        resultado &lt;- valor * 1\n      } else if (unidade_entrada == \"mg/L\" && unidade_saida == \"mg/mL\") {\n        resultado &lt;- valor / 1000\n      } else if (unidade_entrada == \"g/L\" && unidade_saida == \"mg/L\") {\n        resultado &lt;- valor * 1000\n      } else if (unidade_entrada == \"g/L\" && unidade_saida == \"µg/mL\") {\n        resultado &lt;- valor * 1000000\n      } else if (unidade_entrada == \"g/L\" && unidade_saida == \"g/mL\") {\n        resultado &lt;- valor / 1000\n      } else if (unidade_entrada == \"g/L\" && unidade_saida == \"ppm\") {\n        resultado &lt;- valor * 1000000\n      } else if (unidade_entrada == \"g/L\" && unidade_saida == \"mg/mL\") {\n        resultado &lt;- valor * 1\n      } else if (unidade_entrada == \"µg/mL\" && unidade_saida == \"mg/L\") {\n        resultado &lt;- valor * 1\n      } else if (unidade_entrada == \"µg/mL\" && unidade_saida == \"g/L\") {\n        resultado &lt;- valor / 1000\n      } else if (unidade_entrada == \"µg/mL\" && unidade_saida == \"g/mL\") {\n        resultado &lt;- valor / 1000000\n      } else if (unidade_entrada == \"µg/mL\" && unidade_saida == \"ppm\") {\n        resultado &lt;- valor * 1\n      } else if (unidade_entrada == \"g/mL\" && unidade_saida == \"mg/L\") {\n        resultado &lt;- valor * 1000000\n      } else if (unidade_entrada == \"g/mL\" && unidade_saida == \"g/L\") {\n        resultado &lt;- valor * 1000\n      } else if (unidade_entrada == \"g/mL\" && unidade_saida == \"µg/mL\") {\n        resultado &lt;- valor * 1000000\n      } else if (unidade_entrada == \"g/mL\" && unidade_saida == \"ppm\") {\n        resultado &lt;- valor * 1000000\n      } else if (unidade_entrada == \"g/mL\" && unidade_saida == \"mg/mL\") {\n        resultado &lt;- valor * 1000\n      } else if (unidade_entrada == \"ppm\" && unidade_saida == \"mg/L\") {\n        resultado &lt;- valor * 1\n      } else if (unidade_entrada == \"ppm\" && unidade_saida == \"g/L\") {\n        resultado &lt;- valor / 1000\n      } else if (unidade_entrada == \"ppm\" && unidade_saida == \"µg/mL\") {\n        resultado &lt;- valor * 1\n      } else if (unidade_entrada == \"ppm\" && unidade_saida == \"g/mL\") {\n        resultado &lt;- valor / 1000000\n      } else if (unidade_entrada == \"ppm\" && unidade_saida == \"mg/mL\") {\n        resultado &lt;- valor / 1000\n      } else {\n        resultado &lt;- valor\n      }\n    }\n    return(resultado)\n  }\n  output$resultado &lt;- renderText({\n    valor_convertido &lt;- converter_dose(input$valor, input$unidade_entrada, input$unidade_saida)\n    paste(\"Valor convertido:\", valor_convertido, input$unidade_saida)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n“Copyright 2025, Endrio Webers”"
  }
]